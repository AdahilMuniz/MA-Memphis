#!/usr/bin/env python3
import sys
from argparse import ArgumentParser
from os import getenv, makedirs
from os.path import exists
from distutils.dir_util import remove_tree
from subprocess import Popen

def testcase_build(platform_path, testcase_file):
	if not exists(testcase_file):
		raise Exception("Testcase {} not found.".format(testcase_file))
		
	sys.path.append(platform_path+"/modules")
	from testcase import Testcase
	tc = Testcase(platform_path, testcase_file)
	tc.copy()
	tc.build()

def scenario_build(platform_path, testcase_folder, scenario_file):
	testcase_name = testcase_folder.split("/")
	testcase_name = testcase_name[len(testcase_name) - 1]
	testcase_file = testcase_folder+"/"+ testcase_name+".yaml"

	if not exists(testcase_file):
		raise Exception("Testcase {} not found.".format(testcase_file))

	if not exists(scenario_file):
		raise Exception("Scenario {} not found.".format(scenario_file))

	sys.path.append(platform_path+"/modules")
	from scenario import Scenario
	scenario = Scenario(platform_path, testcase_folder, scenario_file)
	scenario.copy()
	scenario.build()

def simulate(debugger_path, scenario_folder, time_limit):
	if not exists(scenario_folder):
		raise Exception("Scenario folder {} not found.".format(scenario_folder))

	time_limit = int(time_limit)
	if time_limit < 0:
		raise Exception("Time limit of {} should be positive.".format(time_limit))

	try:
		remove_tree("{}/log".format(scenario_folder))
		makedirs("{}/log".format(scenario_folder))
	except:
		pass

	simulation = Popen(["{}/memphis".format(scenario_folder), "-c", "{}".format(time_limit)])
	debugger = Popen(["java", "-jar", "{}/Memphis_Debugger.jar".format(DEBUGGER_PATH), "{}/debug/platform.cfg".format(scenario_folder)])

	try:
		simulation.wait()
		debugger.wait()
	except KeyboardInterrupt:
		pass

def memphis_all(platform_path, debugger_path, testcase_file, scenario_file, time_limit):
	testcase_build(platform_path, testcase_file)

	testcase_name = testcase_file.split(".")
	testcase_name = testcase_name[len(testcase_name) - 2]
	testcase_name = testcase_name.split("/")
	testcase_name = testcase_name[len(testcase_name) - 1]

	scenario_build(platform_path, testcase_name, scenario_file)

	scenario_name = scenario_file.split(".")
	scenario_name = scenario_name[len(scenario_name) - 2]
	scenario_name = scenario_name.split("/")
	scenario_name = scenario_name[len(scenario_name) - 1]

	simulate(debugger_path, "{}/{}".format(testcase_name, scenario_name), time_limit)

if __name__ == "__main__":
	parser = ArgumentParser(description="MA-Memphis platform generator and simulator.")
	options = parser.add_mutually_exclusive_group(required=True)
	options.add_argument("--testcase", metavar=("TESTCASE_YAML"), help="Generate a testcase based on a description yaml testcase file")
	options.add_argument("--scenario", nargs=2, metavar=("TESTCASE_FOLDER", "SCENARIO_YAML"), help="Generate a scenario inside generated testcase folder based on a description yaml scenario file")
	options.add_argument('--simulate', nargs=2, metavar=("SCENARIO_FOLDER", "TIME_LIMIT"), help="Simulate a scenario based on a generated scenario folder for a limited time in ms")
	options.add_argument('--all', nargs=3, metavar=("TESTCASE_YAML", "SCENARIO_YAML", "TIME_LIMIT"), help="Generate a scenario based on a testcase and scenario yaml descriptors and simulate for a limited time in ms")
	args = parser.parse_args()

	ENV_PLATFORM_PATH = "MA_MEMPHIS_PATH"
	PLATFORM_PATH = None
	if args.testcase is not None or args.scenario is not None or args.all is not None:
		PLATFORM_PATH = getenv(ENV_PLATFORM_PATH)
		if PLATFORM_PATH is None:
			sys.exit("ERROR: "+ENV_PLATFORM_PATH+" not defined.")

	ENV_DEBUGGER_PATH = "MEMPHIS_DEBUGGER_PATH"
	DEBUGGER_PATH = None
	if args.simulate is not None or args.all is not None:
		DEBUGGER_PATH = getenv(ENV_DEBUGGER_PATH)
		if DEBUGGER_PATH is None:
			sys.exit("ERROR: "+ENV_DEBUGGER_PATH+" not defined.")

	try:
		if args.testcase is not None:
			testcase_build(PLATFORM_PATH, args.testcase)
		elif args.scenario is not None:
			scenario_build(PLATFORM_PATH, args.scenario[0], args.scenario[1])
		elif args.simulate is not None:
			simulate(DEBUGGER_PATH, args.simulate[0], args.simulate[1])
		else:
			# --all
			memphis_all(PLATFORM_PATH, DEBUGGER_PATH, args.all[0], args.all[1], args.all[2])
	except Exception as ex:
		sys.exit("\nERROR: {}".format(ex))


	# testcase_file = args.testcase

	# try:
	# 	testcase_build(PLATFORM_PATH, testcase_file)
	# except Exception as ex:
	# 	sys.exit("\nERROR: {}".format(ex))
