RED  =\033[0;31m
NC   =\033[0m # No Color

ifeq ($(ARCH),)
	ARCH = mipsi
endif

CC = mips-elf-gcc
AS = mips-elf-as
LD = mips-elf-ld
OBJDUMP = mips-elf-objdump
OBJCOPY = mips-elf-objcopy

TARGET = kernel

TGTDIR = kernel
MODDIR = $(TGTDIR)/modules
HALDIR = $(TGTDIR)/hal/$(ARCH)

INCLUDE = -I$(MODDIR)/include -I$(HALDIR) -I$(TGTDIR)

CCSRC = $(wildcard $(TGTDIR)/*.c) $(wildcard $(MODDIR)/*.c)
CCOBJ = $(patsubst %.c,%.o, $(CCSRC))

ASSRC = $(wildcard $(HALDIR)/*.s)
ASOBJ = $(patsubst %.s,%.o, $(ASSRC))

CFLAGS = -Os -Wall -fms-extensions -G 0 -std=c99

all: $(TARGET).txt $(TARGET).lst

$(TARGET).txt: $(TARGET).bin
	@printf "${RED}Generating %s...${NC}\n" "$@"
	@hexdump -v -e '1/1 "%02x" 1/1 "%02x" 1/1 "%02x" 1/1 "%02x" "\n"' $< > $@

$(TARGET).bin: $(TARGET).elf
	@printf "${RED}Generating %s...${NC}\n" "$@"
	@$(OBJCOPY) -R .MIPS.abiflags -R .reginfo $< $@ -I elf32-bigmips -O binary

$(TARGET).elf: $(CCOBJ) $(ASOBJ)
	@printf "${RED}Linking %s...${NC}\n" "$@"
	@$(LD) $^ --section-start=".init"=0 -Map $(TARGET).map -s -N -o $@

$(TARGET).lst: $(TARGET)_debug.elf
	@printf "${RED}Generating %s...${NC}\n" "$@"
	@$(OBJDUMP) -S $< > $@

$(TARGET)_debug.elf: $(CCOBJ) $(ASOBJ)
	@printf "${RED}Linking %s...${NC}\n" "$@"
	@$(LD) $^ --section-start=".init"=0 -Map $(TARGET)_debug.map -s -N -o $@

$(TGTDIR)/%.o: $(TGTDIR)/%.c
	@printf "${RED}Compiling %s...${NC}\n" "$<"
	@$(CC) -c $< -o $@ $(CFLAGS) $(INCLUDE)

$(MODDIR)/%.o: $(MODDIR)/%.c
	@printf "${RED}Compiling %s...${NC}\n" "$<"
	@$(CC) -c $< -o $@ $(CFLAGS) $(INCLUDE)

$(HALDIR)/%.o: $(HALDIR)/%.s
	@printf "${RED}Assemblying %s...${NC}\n" "$<"
	@$(AS) $< -o $@ --defsym sp_addr=$(PAGE_SP_INIT)

clean:
	@printf "Cleaning up\n"
	@rm -rf *.o
	@rm -rf *.bin
	@rm -rf *.map
	@rm -rf *.lst
	@rm -rf *.txt
	@rm -rf *.elf

.PHONY: clean
